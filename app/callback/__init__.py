# -*- coding: utf-8 -*-

from app import remote
from app import logging
from app.bot import bot as bot
from app.remote.postgresql import Psql as psql
from app.remote.redis import Redis as redis
from app import commands as commands
from telebot import types
from datetime import datetime
import logging
import asyncio
import requests


def callback_query(call):
    try:
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)

        if call.message:
            if call.data == "exit_to_start_menu":
                bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
                commands.start.startmenu(message=call)
            if call.data == "start_vk_import":
                markup = types.InlineKeyboardMarkup(row_width=1)
                markup.add(
                    types.InlineKeyboardButton("–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å", url="google.com"),
                    types.InlineKeyboardButton("‚ùå  –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="exit_to_start_menu")
                )
                bot.edit_message_text(
                    "–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ—Å—Ç–≤ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ "
                    "–∑–∞–ø—Ä–æ—à–µ–Ω –¥–æ—Å—Ç—É–ø –∫ —Å—Ç–µ–Ω–µ, —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∞–º–∏—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–π. "
                    "–¢–∞–∫–∂–µ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ, —á—Ç–æ–±—ã —É–≤–µ–ª–∏—á–∏—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä—É–ø–ø –¥–æ 30 "
                    "–∏ –ø–æ–Ω–∏–∑–∏—Ç—å –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ 15 –º–∏–Ω—É—Ç. –ï—Å–ª–∏ –í—ã —Ö–æ—Ç–∏—Ç–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –±–æ–ª—å—à–µ "
                    "30 —Å–æ–æ–±—â–µ—Å—Ç–≤, —Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ UNIQUE (–ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –Ω–µ–π –≤ FAQ).",
                    parse_mode="Markdown", reply_markup=markup,
                    chat_id=call.from_user.id, message_id=call.message.message_id
                )
            elif call.data == "start_menu_direct_url":
                bot.edit_message_text(
                    "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /add.",
                    parse_mode="Markdown", chat_id=call.from_user.id, message_id=call.message.message_id
                )
            elif call.data == "start_menu_next":
                logging.warning("The temporary stub for callback with start_menu_next data.")
            elif call.data.startswith("channel_counters_"):
                data_splitted = call.data.replace("channel_counters_", "", 1).split("|")

                cached = loop.run_until_complete(
                    redis.execute("EXISTS", "channel_counters|{0}".format(str(data_splitted[1]))))
                cached = int(cached)
                if cached:
                    counters_data_splitted = loop.run_until_complete(redis.execute("GET", "channel_counters|{0}".format(
                        str(data_splitted[1])
                    ))).split("_")
                else:
                    owner_id = loop.run_until_complete(psql.fetchrow('SELECT owner_id FROM channels WHERE id = $1;',
                                                                     int(call.message.json['chat']['id'])))['owner_id']
                    token = loop.run_until_complete(psql.fetchrow(
                        'SELECT vk_token FROM users WHERE id = $1;',
                        int(owner_id)
                    ))['vk_token']

                    ids_data_splitted = data_splitted[1].split("_")
                    post_counters = requests.post("https://api.vk.com/method/wall.getById",
                                                  data={
                                                      "posts": str(
                                                          str(ids_data_splitted[1]) + "_" +
                                                          str(ids_data_splitted[2])
                                                      ),
                                                      "copy_history_depth": 1,
                                                      "extended": 1,
                                                      "access_token": token,
                                                      "v": "5.78"
                                                  }).json()['response']['items'][0]
                    counters_data_splitted = "{0}_{1}_{2}_{3}_{4}".format(
                        str(post_counters['date']),
                        str(post_counters['likes']['count']),
                        str(post_counters['comments']['count']),
                        str(post_counters['reposts']['count']),
                        str(post_counters['views']['count'])
                    ).split("_")

                if data_splitted[0] == "time":
                    bot.answer_callback_query(callback_query_id=call.id,
                                              text="üïí –í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –¥–∞–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞: {0} MSK.".format(
                                                  str(datetime.fromtimestamp(
                                                      int(counters_data_splitted[0])).strftime("%H:%M"))),
                                              show_alert=True)
                elif data_splitted[0] == "likes":
                    bot.answer_callback_query(callback_query_id=call.id,
                                              text="üíñ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∞–π–∫–æ–≤: {0}.".format(
                                                  str(counters_data_splitted[1]), show_alert=True))
                elif data_splitted[0] == "comments":
                    bot.answer_callback_query(callback_query_id=call.id,
                                              text="üí¨ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {0}.".format(
                                                  str(counters_data_splitted[2]), show_alert=True))
                elif data_splitted[0] == "reposts":
                    bot.answer_callback_query(callback_query_id=call.id,
                                              text="üîÅ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–ø–æ—Å—Ç–æ–≤: {0}.".format(
                                                  str(counters_data_splitted[3]), show_alert=True))
                elif data_splitted[0] == "views":
                    bot.answer_callback_query(callback_query_id=call.id,
                                              text="üëÅ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: {0}.".format(
                                                  str(counters_data_splitted[4]), show_alert=True))
                else:
                    bot.answer_callback_query(callback_query_id=call.id,
                                              text="‚ùó –û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.",
                                              show_alert=True)

            bot.answer_callback_query(callback_query_id=call.id, show_alert=False)
    except Exception as e:
        try:
            bot.send_message(call.from_user.id,
                             "‚ùó *–ò–∑–≤–∏–Ω–∏—Ç–µ, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –Ω–æ –≤ —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ –≤—Å–µ –∏—Å–ø—Ä–∞–≤–∏—Ç—Å—è. "
                             "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ç–æ –∂–µ —Å–∞–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è (10-15 –º–∏–Ω—É—Ç).*",
                             parse_mode="Markdown")
        except:
            pass

        logging.error("Exception has been occurred while trying to execute the method.", exc_info=True)
        return e
