# -*- coding: utf-8 -*-

from app import logging
from app.utils.post_statistics import statistics as postStatistics
from app.remote.postgresql import Psql as psql
from app.remote.redis import Redis as redis
from telegram.ext.dispatcher import run_async
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from app.commands.start import start_menu as startMenu
from datetime import datetime
from time import time
import logging
import asyncio
import requests


def refresh_stats(bot, call):
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    stats = call.data.split("|")
    pdata = stats[1]
    expired = stats[2]

    if int(time()) >= int(expired):
        owner_id = loop.run_until_complete(psql.fetchrow('SELECT owner_id FROM channels WHERE id = $1;',
                                                         int(call.message.chat.id)))['owner_id']
        access_token = loop.run_until_complete(psql.fetchrow(
            'SELECT access_token FROM users WHERE id = $1;',
            int(owner_id)
        ))['access_token']

        pdata_splitted = str(pdata).split("&")
        post = requests.post("https://api.vk.com/method/wall.getById",
                             data={
                                 "posts": str(
                                     str(pdata_splitted[0]) + "_" +
                                     str(pdata_splitted[1])
                                 ),
                                 "copy_history_depth": 1,
                                 "extended": 1,
                                 "access_token": access_token,
                                 "v": "5.80"
                             }).json()['response']['items'][0]
        update_status = postStatistics(bot, posts=post, chat_id=call.message.chat.id,
                                       message_id=call.message.message_id, mtype="update")
        if update_status == "OK" or update_status == "IS NOT MODIFIED":
            bot.answer_callback_query(callback_query_id=call.id,
                                      text="‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∞–Ω–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞! "
                                           "–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –∫–ª–∏–µ–Ω—Ç—É –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ 30 —Å–µ–∫—É–Ω–¥ –¥–ª—è "
                                           "–æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É.",
                                      show_alert=True, cache_time=30)
        else:
            bot.answer_callback_query(callback_query_id=call.id,
                                      text="‚ùå –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–∞–Ω–Ω–æ–π "
                                           "–ø—É–±–ª–∏–∫–∞—Ü–∏–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                                      show_alert=True, cache_time=30)
    else:
        bot.answer_callback_query(callback_query_id=call.id,
                                  text="‚ùå –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∞–Ω–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –±—ã–ª–∞ –Ω–µ–¥–∞–≤–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ "
                                       "–Ω–µ–º–Ω–æ–≥–æ –ø–æ–∑–∂–µ.",
                                  show_alert=True, cache_time=30)


@run_async
def callback(bot, call):
    try:
        call = call.callback_query
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)

        if call.message:
            if call.data == "exit_to_start_menu":
                bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
                # noinspection PyUnresolvedReferences
                startMenu(bot, call)
            if call.data == "start_vk_import":
                markup = [
                    [InlineKeyboardButton("–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å", url="google.com")],
                    [InlineKeyboardButton("‚ùå  –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="exit_to_start_menu")]
                ]
                markup = InlineKeyboardMarkup(markup)

                bot.edit_message_text(
                    "–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ—Å—Ç–≤ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ "
                    "–∑–∞–ø—Ä–æ—à–µ–Ω –¥–æ—Å—Ç—É–ø –∫ —Å—Ç–µ–Ω–µ, —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∞–º–∏—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–π. "
                    "–¢–∞–∫–∂–µ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ, —á—Ç–æ–±—ã —É–≤–µ–ª–∏—á–∏—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä—É–ø–ø –¥–æ 30 "
                    "–∏ –ø–æ–Ω–∏–∑–∏—Ç—å –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ 15 –º–∏–Ω—É—Ç. –ï—Å–ª–∏ –í—ã —Ö–æ—Ç–∏—Ç–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –±–æ–ª—å—à–µ "
                    "30 —Å–æ–æ–±—â–µ—Å—Ç–≤, —Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ UNIQUE (–ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –Ω–µ–π –≤ FAQ).",
                    parse_mode="Markdown", reply_markup=markup,
                    chat_id=call.from_user.id, message_id=call.message.message_id
                )
            elif call.data == "start_menu_direct_url":
                bot.edit_message_text(
                    "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /add.",
                    parse_mode="Markdown", chat_id=call.from_user.id, message_id=call.message.message_id
                )
            elif call.data == "start_menu_next":
                pass
            elif call.data.startswith("channel_counters"):
                counter = call.data.split("|")
                counter_name = counter[1]
                counter_amount = counter[2]
                if counter_name == "time":
                    bot.answer_callback_query(callback_query_id=call.id,
                                              text="üïí –í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –¥–∞–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞: {0} MSK.".format(
                                                  str(datetime.fromtimestamp(
                                                      int(counter_amount)).strftime("%d.%m.%y, %H:%M:%S"))),
                                              show_alert=True, cache_time=30)
                elif counter_name == "likes":
                    bot.answer_callback_query(callback_query_id=call.id,
                                              text="üíñ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∞–π–∫–æ–≤: {0}.".format(
                                                  str(counter_amount)), show_alert=True, cache_time=30)
                elif counter_name == "comments":
                    bot.answer_callback_query(callback_query_id=call.id,
                                              text="üí¨ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {0}.".format(
                                                  str(counter_amount)), show_alert=True, cache_time=30)
                elif counter_name == "reposts":
                    bot.answer_callback_query(callback_query_id=call.id,
                                              text="üîÅ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–ø–æ—Å—Ç–æ–≤: {0}.".format(
                                                  str(counter_amount)), show_alert=True, cache_time=30)
                elif counter_name == "views":
                    bot.answer_callback_query(callback_query_id=call.id,
                                              text="üëÅ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: {0}.".format(
                                                  str(counter_amount)), show_alert=True, cache_time=30)
                elif counter_name == "poll":
                    try:
                        poll_name = loop.run_until_complete(redis.execute("GET", str("poll&" + str(counter_amount))))
                    except AttributeError:
                        logging.debug("AttributeError Exception has been occurred, most likely this poll "
                                      "isn't in the cache.", exc_info=True)
                        refresh_stats(bot, call)
                        return
                    bot.answer_callback_query(callback_query_id=call.id,
                                              text="üìã –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è: {0}.".format(
                                                  str(poll_name[0:170])), show_alert=True, cache_time=30)
                elif counter_name == "poll_ans":
                    try:
                        poll_answer = loop.run_until_complete(redis.execute(
                            "GET", str("poll_answer&" + str(counter_amount)))).split("&")
                    except AttributeError:
                        logging.debug("AttributeError Exception has been occurred, most likely this poll answer "
                                      "isn't in the cache.", exc_info=True)
                        refresh_stats(bot, call)
                        return
                    bot.answer_callback_query(callback_query_id=call.id,
                                              text="‚ùé –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤ –∑–∞ {0}: {1} –≥–æ–ª–æ—Å–æ–≤.".format(
                                                  str(poll_answer[0][0:140]), str(poll_answer[1])),
                                              show_alert=True, cache_time=30)
            elif call.data.startswith("channel_refresh_stats"):
                refresh_stats(bot, call)
            bot.answer_callback_query(callback_query_id=call.id, show_alert=False)
    except Exception as e:
        logging.error("Exception has been occurred while trying to execute the method.", exc_info=True)
        return e
